#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef PRODUCTFRUITSKIT_SWIFT_H
#define PRODUCTFRUITSKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ProductfruitsKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

SWIFT_CLASS("_TtC16ProductfruitsKit13DismissButton")
@interface DismissButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end





@class NSString;

/// Tool types in the ProductFruits platform.
SWIFT_CLASS("_TtC16ProductfruitsKit10PFToolType")
@interface PFToolType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PFToolType * _Nonnull announcement;)
+ (PFToolType * _Nonnull)announcement SWIFT_WARN_UNUSED_RESULT;
/// The raw string value for this tool type.
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
/// The prefix used for composite tool IDs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull compositeIdPrefix;)
+ (NSString * _Nonnull)compositeIdPrefix SWIFT_WARN_UNUSED_RESULT;
/// Create a composite ID for a tool.
/// \param type The type of the tool.
///
/// \param id The ID of the tool.
///
///
/// returns:
/// A composite ID (e.g., “pf_announcement_123”).
+ (NSString * _Nonnull)createCompositeIdWithType:(PFToolType * _Nonnull)type id:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Check if a string is a composite tool ID.
/// \param string The string to check.
///
///
/// returns:
/// True if the string is a composite tool ID, false otherwise.
+ (BOOL)isCompositeId:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Extract the tool type from a composite tool ID.
/// \param compositeId The composite ID to parse.
///
///
/// returns:
/// The tool type, or nil if the ID is invalid.
+ (PFToolType * _Nullable)extractTypeFromCompositeId:(NSString * _Nonnull)compositeId SWIFT_WARN_UNUSED_RESULT;
/// Extract the ID from a composite tool ID.
/// \param compositeId The composite ID to parse.
///
///
/// returns:
/// The ID, or nil if the ID is invalid.
+ (NSString * _Nullable)extractIdFromCompositeId:(NSString * _Nonnull)compositeId SWIFT_WARN_UNUSED_RESULT;
/// Extract both the type and ID from a composite tool ID.
/// \param compositeId The composite ID to parse.
///
/// \param typeOut An out parameter that will be set to the tool type, or nil if the ID is invalid.
///
/// \param idOut An out parameter that will be set to the ID, or nil if the ID is invalid.
///
///
/// returns:
/// True if the extraction was successful, false otherwise.
+ (BOOL)extractFromCompositeId:(NSString * _Nonnull)compositeId typeOut:(PFToolType * _Nullable * _Nonnull)typeOut idOut:(NSString * _Nullable * _Nonnull)idOut SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Config;
@class NSData;
@class UNNotificationResponse;
@protocol NSObject;
@class NSOperationQueue;
@class NSNotification;
@class ProductFruitsState;

SWIFT_CLASS_NAMED("ProductFruits") SWIFT_AVAILABILITY(ios,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface ProductFruits : NSObject
/// Enables automatic push notification management.
/// This should be called in <code>UIApplicationDelegate.application(_:didFinishLaunchingWithOptions:)</code>
/// to ensure no incoming notifications are missed.
/// The following will automatically be handled:
/// <ol>
///   <li>
///     Calling <code>UIApplication.registerForRemoteNotifications()</code>
///   </li>
///   <li>
///     Implementing <code>UIApplicationDelegate.application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>
///     to call <code>setPushToken(_:)</code>
///   </li>
///   <li>
///     Ensuring <code>UNUserNotificationCenter.current().delegate</code> is set
///   </li>
///   <li>
///     Implementing <code>UNUserNotificationCenterDelegate.userNotificationCenter(_:didReceive:withCompletionHandler:)</code>
///     to call <code>didReceiveNotification(response:completionHandler:)</code>
///   </li>
///   <li>
///     Implementing <code>UNUserNotificationCenterDelegate.userNotificationCenter(_:willPresent:withCompletionHandler:)</code>
///     to show notification while the app is in the foreground
///   </li>
/// </ol>
+ (void)enableAutomaticPushConfig;
/// Creates a new instance of the ProductFruits SDK.
/// \param config The configuration for the SDK.
///
- (nonnull instancetype)initWithConfig:(Config * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
/// Identifies the current user.
/// \param userID The user’s ID.
///
/// \param username The user’s username or email.
///
/// \param firstName First name of the user (optional).
///
/// \param lastName Last name of the user (optional).
///
/// \param signUpAt Sign-up date in ISO 8601 format (optional).
///
/// \param role User’s role (optional).
///
/// \param additionalProperties Any additional custom properties (optional).
///
/// \param completion Optional completion handler called when identification completes.
///
- (void)identifyWithUserID:(NSString * _Nonnull)userID username:(NSString * _Nonnull)username firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName signUpAt:(NSString * _Nullable)signUpAt role:(NSString * _Nullable)role additionalProperties:(NSDictionary<NSString *, id> * _Nullable)additionalProperties completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Resets the user to anonymous.
- (void)anonymousWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Clears out the current user in this session. Can be used when the user logs out of your application.
- (void)reset;
/// Sets the current screen for tracking and segmentation purposes.
/// The screen name will be used in client-side rules and segmentation to filter experiences by screen.
/// This will also automatically track a screen view event.
/// \param screenName The name of the current screen (pass nil or empty string to clear)
///
- (void)setScreen:(NSString * _Nullable)screenName;
/// Gets the current screen name.
///
/// returns:
/// The current screen name or nil if not set
- (NSString * _Nullable)getCurrentScreen SWIFT_WARN_UNUSED_RESULT;
/// Track a custom event.
/// \param name Name of the event.
///
/// \param properties Optional properties for the event.
///
/// \param completion Optional completion handler called when the event is tracked.
///
- (void)trackWithName:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Show an experience by its ID.
/// \param experienceID The ID of the experience to show.
///
/// \param completion A closure to be called when the experience is shown.
///
- (void)showWithExperienceID:(NSString * _Nonnull)experienceID completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Show an experience using raw JSON data.
/// \param jsonString Raw JSON string containing the experience data.
///
/// \param completion A closure to be called when the experience is shown.
///
- (void)showRawWithJsonString:(NSString * _Nonnull)jsonString completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Submit feedback from the user with Objective-C compatible completion handler.
/// \param message The feedback message.
///
/// \param email Optional email of the user.
///
/// \param screenshotURL Optional URL to a screenshot.
///
/// \param metadata Optional additional metadata.
///
/// \param completion Optional callback for when the feedback is submitted. Success is true if successful, false if failed.
///
- (void)submitFeedbackObjcWithMessage:(NSString * _Nonnull)message email:(NSString * _Nullable)email screenshotURL:(NSString * _Nullable)screenshotURL metadata:(NSDictionary<NSString *, id> * _Nullable)metadata completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Current version of the SDK.
- (NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// Enable debug logging with a specific category.
/// \param category The category for the logger.
///
- (void)enableDebugLoggingWithCategory:(NSString * _Nonnull)category;
/// Disable debug logging.
- (void)disableDebugLogging;
/// Tracks a screen view.
/// \param title The title of the screen.
///
/// \param properties Optional properties for the screen view.
///
- (void)screenWithTitle:(NSString * _Nonnull)title properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Identify a group for the current user.
/// \param groupID Unique value identifying the group.
///
/// \param properties Optional properties that provide additional context about the group.
///
- (void)groupWithGroupID:(NSString * _Nullable)groupID properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Set the push notification device token for this device.
/// \param deviceToken The device token received from APNS.
///
- (void)setPushToken:(NSData * _Nonnull)deviceToken;
/// Get the current push notification device token.
///
/// returns:
/// The device token as a string, or nil if not set.
- (NSString * _Nullable)getPushToken SWIFT_WARN_UNUSED_RESULT;
/// Verifies if a notification response is handled by the ProductFruits SDK.
/// \param response The notification response to handle.
///
/// \param completionHandler The completion handler to call when done processing.
///
///
/// returns:
/// <code>true</code> if ProductFruits successfully processed the notification.
- (BOOL)didReceiveNotificationWithResponse:(UNNotificationResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Load a preview of a tool by its global ID.
/// \param globalId The global ID of the tool.
///
/// \param completion A closure to be called when the content is loaded.
///
- (void)loadToolPreviewWithGlobalId:(NSString * _Nonnull)globalId completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Load a published tool by its global ID.
/// \param globalId The global ID of the tool.
///
/// \param completion A closure to be called when the content is loaded.
///
- (void)loadToolWithGlobalId:(NSString * _Nonnull)globalId completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Adds a notification observer for SDK state changes using selector-based API.
/// This method is provided for Objective-C compatibility.
/// For Swift code, use the block-based <code>addStateChangeObserver</code> method instead.
/// note:
/// In Objective-C, your selector should have the signature: <code>- (void)handleStateChange:(NSNotification *)notification</code>
/// \param observer The object that will receive the notification
///
/// \param selector The selector to call when the notification is received
///
///
/// returns:
/// A token that must be passed to removeStateChangeNotificationObserver
+ (id <NSObject> _Nonnull)addStateChangeNotificationObserver:(id _Nonnull)observer selector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
/// Adds a block-based notification observer for SDK state changes.
/// This is the recommended way to observe state changes in Swift code.
/// \param queue The operation queue to which block should be added (nil means current queue)
///
/// \param block The block to execute when the notification is received, which includes the state change
///
///
/// returns:
/// The token that can be used to remove the observer
+ (id <NSObject> _Nonnull)addStateChangeObserverWithQueue:(NSOperationQueue * _Nullable)queue using:(void (^ _Nonnull)(NSNotification * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Adds a block-based notification observer for SDK state changes, with state dictionary for Objective-C/React Native.
/// This method is specifically designed for Objective-C and React Native compatibility,
/// providing the state information as a dictionary rather than a Notification object.
/// \param queue The operation queue to which block should be added (nil means current queue)
///
/// \param block The block to execute when the notification is received, with state as dictionary
///
///
/// returns:
/// The token that can be used to remove the observer
+ (id <NSObject> _Nonnull)addStateChangeObserverWithDictionaryWithQueue:(NSOperationQueue * _Nullable)queue using:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))block SWIFT_WARN_UNUSED_RESULT;
/// Removes a notification observer for SDK state changes
/// note:
/// For block-based observers, use the token returned from addStateChangeObserver. For selector-based observers, pass the original observer object.
/// \param token The token returned from addStateChangeObserver, or the observer object itself if using addStateChangeNotificationObserver
///
+ (void)removeStateChangeNotificationObserver:(id <NSObject> _Nonnull)token;
/// Extracts the ProductFruitsState from a notification
/// \param notification The notification object
///
///
/// returns:
/// The ProductFruitsState or nil if not found
+ (ProductFruitsState * _Nullable)getStateFromNotification:(NSNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Get instance ID from notification
/// \param notification The notification object
///
///
/// returns:
/// The instance ID or nil if not found
+ (NSString * _Nullable)getInstanceIdFromNotification:(NSNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Get a snapshot of the current SDK state
///
/// returns:
/// The current SDK state
- (ProductFruitsState * _Nonnull)getCurrentState SWIFT_WARN_UNUSED_RESULT;
/// Gets the notification name for state changes, for use in Objective-C code
///
/// returns:
/// The notification name string
+ (NSString * _Nonnull)stateChangedNotificationName SWIFT_WARN_UNUSED_RESULT;
/// Extracts the state dictionary from a notification, useful for React Native bridges
/// \param notification The notification object
///
///
/// returns:
/// A dictionary representation of the state, or nil if not found
+ (NSDictionary<NSString *, id> * _Nullable)getStateDictionaryFromNotification:(NSNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Sends a preview notification for a specific experience.
/// \param experienceID The ID of the experience for which to send a preview notification.
///
/// \param completion Optional callback for when the notification is sent. Success is true if successful, false if failed.
///
- (void)sendPreviewNotificationWithExperienceID:(NSString * _Nonnull)experienceID completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ProductFruits (SWIFT_EXTENSION(ProductfruitsKit))
@end

@class NSURL;
@class NSURLSession;

SWIFT_CLASS("_TtCC16ProductfruitsKit13ProductFruits6Config") SWIFT_AVAILABILITY(ios,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface Config : NSObject
/// Creates a new configuration for the ProductFruits SDK.
/// \param projectCode The ProductFruits project code.
///
/// \param applicationID The application ID.
///
/// \param language The language code for the SDK (e.g., “en”, “fr”).
///
- (nonnull instancetype)initWithProjectCode:(NSString * _Nonnull)projectCode applicationID:(NSString * _Nonnull)applicationID language:(NSString * _Nonnull)language OBJC_DESIGNATED_INITIALIZER;
/// Set the logging status for the configuration.
/// \param enabled Whether logging is enabled.
///
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)logging:(BOOL)enabled;
/// Set the logging status for the configuration with a specific category.
/// \param enabled Whether logging is enabled.
///
/// \param category The category for the logger, allowing for more specific filtering.
///
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)logging:(BOOL)enabled category:(NSString * _Nonnull)category;
/// Set the API host for the configuration.
/// Any path values in the provided <code>URL</code> will be discarded.
/// \param apiHost Domain of the API host.
///
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)apiHost:(NSURL * _Nonnull)apiHost;
/// Set the <code>URLSession</code> instance used by the configuration.
/// Injecting a custom <code>URLSession</code> may be useful for testing in combination with <code>URLSessionConfiguration.protocolClasses</code>.
/// \param urlSession <code>URLSession</code> object.
///
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)urlSession:(NSURLSession * _Nonnull)urlSession;
/// Configures the SDK to trust self-signed certificates for localhost connections.
/// This should only be used during development and never in production.
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)trustLocalhostCertificates;
- (nonnull instancetype)deviceProperties:(NSDictionary<NSString *, id> * _Nonnull)deviceProperties;
/// Set a custom environment URL for the configuration.
/// This method sets both the API host and settings host to the provided URL.
/// \param environmentUrl The base URL for the ProductFruits environment.
///
///
/// returns:
/// The <code>ProductFruits.Config</code> object.
- (nonnull instancetype)setEnvironmentUrl:(NSURL * _Nonnull)environmentUrl;
/// Set the maximum number of activity items to store for retry.
/// \param maxSize The maximum number of items to store.
///
///
/// returns:
/// The <code>ProductFruits.Config</code> object.
- (nonnull instancetype)activityStorageMaxSize:(NSUInteger)maxSize;
/// Set the maximum age in seconds for stored activity items.
/// \param maxAgeSeconds The maximum age in seconds.
///
///
/// returns:
/// The <code>ProductFruits.Config</code> object.
- (nonnull instancetype)activityStorageMaxAge:(NSUInteger)maxAgeSeconds;
- (nonnull instancetype)setUserLanguage:(NSString * _Nonnull)language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface ProductFruits (SWIFT_EXTENSION(ProductfruitsKit))
- (NSURL * _Nonnull)getBaseEnvUrl SWIFT_WARN_UNUSED_RESULT;
@end


/// Errors that can occur in the ProductFruits SDK.
typedef SWIFT_ENUM(NSInteger, ProductFruitsError, open) {
  ProductFruitsErrorUserNotIdentified = 0,
  ProductFruitsErrorInvalidToolId = 1,
  ProductFruitsErrorInvalidConfiguration = 2,
  ProductFruitsErrorInvalidResponse = 3,
  ProductFruitsErrorNetworkError = 4,
  ProductFruitsErrorInvalidUsername = 5,
  ProductFruitsErrorSdkNotAvailable = 6,
  ProductFruitsErrorActivityProcessingFailed = 7,
  ProductFruitsErrorUnsupportedOSVersion = 8,
  ProductFruitsErrorInternalError = 9,
};
static NSString * _Nonnull const ProductFruitsErrorDomain = @"ProductfruitsKit.ProductFruitsError";

enum IdentificationStatus : NSInteger;

SWIFT_CLASS("_TtC16ProductfruitsKit18ProductFruitsState")
@interface ProductFruitsState : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly) BOOL isAnonymous;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceID;
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
@property (nonatomic, readonly) BOOL isActive;
@property (nonatomic, readonly, copy) NSString * _Nonnull lastUpdated;
@property (nonatomic, readonly) enum IdentificationStatus status;
@property (nonatomic, readonly, copy) NSString * _Nonnull statusDescription;
- (nonnull instancetype)initWithVersion:(NSString * _Nonnull)version projectCode:(NSString * _Nonnull)projectCode userID:(NSString * _Nonnull)userID isAnonymous:(BOOL)isAnonymous deviceID:(NSString * _Nonnull)deviceID sessionID:(NSString * _Nullable)sessionID isActive:(BOOL)isActive OBJC_DESIGNATED_INITIALIZER;
/// Get a JSON representation of the state
/// @returns Dictionary containing the state properties
- (NSDictionary<NSString *, id> * _Nonnull)toDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IdentificationStatus, open) {
  IdentificationStatusNotIdentified = 0,
  IdentificationStatusAnonymous = 1,
  IdentificationStatusIdentified = 2,
};


SWIFT_CLASS("_TtC16ProductfruitsKit24StateNotificationManager") SWIFT_AVAILABILITY(ios,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface StateNotificationManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)postStateChangeFrom:(ProductFruits * _Nonnull)sdk;
@end








#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef PRODUCTFRUITSKIT_SWIFT_H
#define PRODUCTFRUITSKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ProductfruitsKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

SWIFT_CLASS("_TtC16ProductfruitsKit13DismissButton")
@interface DismissButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end





@class NSString;

/// Tool types in the ProductFruits platform.
SWIFT_CLASS("_TtC16ProductfruitsKit10PFToolType")
@interface PFToolType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PFToolType * _Nonnull announcement;)
+ (PFToolType * _Nonnull)announcement SWIFT_WARN_UNUSED_RESULT;
/// The raw string value for this tool type.
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
/// The prefix used for composite tool IDs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull compositeIdPrefix;)
+ (NSString * _Nonnull)compositeIdPrefix SWIFT_WARN_UNUSED_RESULT;
/// Create a composite ID for a tool.
/// \param type The type of the tool.
///
/// \param id The ID of the tool.
///
///
/// returns:
/// A composite ID (e.g., “pf_announcement_123”).
+ (NSString * _Nonnull)createCompositeIdWithType:(PFToolType * _Nonnull)type id:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Check if a string is a composite tool ID.
/// \param string The string to check.
///
///
/// returns:
/// True if the string is a composite tool ID, false otherwise.
+ (BOOL)isCompositeId:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Extract the tool type from a composite tool ID.
/// \param compositeId The composite ID to parse.
///
///
/// returns:
/// The tool type, or nil if the ID is invalid.
+ (PFToolType * _Nullable)extractTypeFromCompositeId:(NSString * _Nonnull)compositeId SWIFT_WARN_UNUSED_RESULT;
/// Extract the ID from a composite tool ID.
/// \param compositeId The composite ID to parse.
///
///
/// returns:
/// The ID, or nil if the ID is invalid.
+ (NSString * _Nullable)extractIdFromCompositeId:(NSString * _Nonnull)compositeId SWIFT_WARN_UNUSED_RESULT;
/// Extract both the type and ID from a composite tool ID.
/// \param compositeId The composite ID to parse.
///
/// \param typeOut An out parameter that will be set to the tool type, or nil if the ID is invalid.
///
/// \param idOut An out parameter that will be set to the ID, or nil if the ID is invalid.
///
///
/// returns:
/// True if the extraction was successful, false otherwise.
+ (BOOL)extractFromCompositeId:(NSString * _Nonnull)compositeId typeOut:(PFToolType * _Nullable * _Nonnull)typeOut idOut:(NSString * _Nullable * _Nonnull)idOut SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Config;
@class NSData;
@class UNNotificationResponse;
@protocol NSObject;
@class NSOperationQueue;
@class NSNotification;
@class ProductFruitsState;

SWIFT_CLASS_NAMED("ProductFruits") SWIFT_AVAILABILITY(ios,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface ProductFruits : NSObject
/// Enables automatic push notification management.
/// This should be called in <code>UIApplicationDelegate.application(_:didFinishLaunchingWithOptions:)</code>
/// to ensure no incoming notifications are missed.
/// The following will automatically be handled:
/// <ol>
///   <li>
///     Calling <code>UIApplication.registerForRemoteNotifications()</code>
///   </li>
///   <li>
///     Implementing <code>UIApplicationDelegate.application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>
///     to call <code>setPushToken(_:)</code>
///   </li>
///   <li>
///     Ensuring <code>UNUserNotificationCenter.current().delegate</code> is set
///   </li>
///   <li>
///     Implementing <code>UNUserNotificationCenterDelegate.userNotificationCenter(_:didReceive:withCompletionHandler:)</code>
///     to call <code>didReceiveNotification(response:completionHandler:)</code>
///   </li>
///   <li>
///     Implementing <code>UNUserNotificationCenterDelegate.userNotificationCenter(_:willPresent:withCompletionHandler:)</code>
///     to show notification while the app is in the foreground
///   </li>
/// </ol>
+ (void)enableAutomaticPushConfig;
/// Creates a new instance of the ProductFruits SDK.
/// \param config The configuration for the SDK.
///
- (nonnull instancetype)initWithConfig:(Config * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
/// Identifies the current user.
/// \param userID The user’s ID.
///
/// \param username The user’s username or email.
///
/// \param firstName First name of the user (optional).
///
/// \param lastName Last name of the user (optional).
///
/// \param signUpAt Sign-up date in ISO 8601 format (optional).
///
/// \param role User’s role (optional).
///
/// \param additionalProperties Any additional custom properties (optional).
///
/// \param completion Optional completion handler called when identification completes.
///
- (void)identifyWithUserID:(NSString * _Nonnull)userID username:(NSString * _Nonnull)username firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName signUpAt:(NSString * _Nullable)signUpAt role:(NSString * _Nullable)role additionalProperties:(NSDictionary<NSString *, id> * _Nullable)additionalProperties completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Resets the user to anonymous.
- (void)anonymousWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Clears out the current user in this session. Can be used when the user logs out of your application.
- (void)reset;
/// Sets the current screen for tracking and segmentation purposes.
/// The screen name will be used in client-side rules and segmentation to filter experiences by screen.
/// This will also automatically track a screen view event.
/// \param screenName The name of the current screen (pass nil or empty string to clear)
///
- (void)setScreen:(NSString * _Nullable)screenName;
/// Gets the current screen name.
///
/// returns:
/// The current screen name or nil if not set
- (NSString * _Nullable)getCurrentScreen SWIFT_WARN_UNUSED_RESULT;
/// Track a custom event.
/// \param name Name of the event.
///
/// \param properties Optional properties for the event.
///
/// \param completion Optional completion handler called when the event is tracked.
///
- (void)trackWithName:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Show an experience by its ID.
/// \param experienceID The ID of the experience to show.
///
/// \param completion A closure to be called when the experience is shown.
///
- (void)showWithExperienceID:(NSString * _Nonnull)experienceID completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Show an experience using raw JSON data.
/// \param jsonString Raw JSON string containing the experience data.
///
/// \param completion A closure to be called when the experience is shown.
///
- (void)showRawWithJsonString:(NSString * _Nonnull)jsonString completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Submit feedback from the user with Objective-C compatible completion handler.
/// \param message The feedback message.
///
/// \param email Optional email of the user.
///
/// \param screenshotURL Optional URL to a screenshot.
///
/// \param metadata Optional additional metadata.
///
/// \param completion Optional callback for when the feedback is submitted. Success is true if successful, false if failed.
///
- (void)submitFeedbackObjcWithMessage:(NSString * _Nonnull)message email:(NSString * _Nullable)email screenshotURL:(NSString * _Nullable)screenshotURL metadata:(NSDictionary<NSString *, id> * _Nullable)metadata completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Current version of the SDK.
- (NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// Enable debug logging with a specific category.
/// \param category The category for the logger.
///
- (void)enableDebugLoggingWithCategory:(NSString * _Nonnull)category;
/// Disable debug logging.
- (void)disableDebugLogging;
/// Tracks a screen view.
/// \param title The title of the screen.
///
/// \param properties Optional properties for the screen view.
///
- (void)screenWithTitle:(NSString * _Nonnull)title properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Identify a group for the current user.
/// \param groupID Unique value identifying the group.
///
/// \param properties Optional properties that provide additional context about the group.
///
- (void)groupWithGroupID:(NSString * _Nullable)groupID properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Set the push notification device token for this device.
/// \param deviceToken The device token received from APNS.
///
- (void)setPushToken:(NSData * _Nonnull)deviceToken;
/// Get the current push notification device token.
///
/// returns:
/// The device token as a string, or nil if not set.
- (NSString * _Nullable)getPushToken SWIFT_WARN_UNUSED_RESULT;
/// Verifies if a notification response is handled by the ProductFruits SDK.
/// \param response The notification response to handle.
///
/// \param completionHandler The completion handler to call when done processing.
///
///
/// returns:
/// <code>true</code> if ProductFruits successfully processed the notification.
- (BOOL)didReceiveNotificationWithResponse:(UNNotificationResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Load a preview of a tool by its global ID.
/// \param globalId The global ID of the tool.
///
/// \param completion A closure to be called when the content is loaded.
///
- (void)loadToolPreviewWithGlobalId:(NSString * _Nonnull)globalId completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Load a published tool by its global ID.
/// \param globalId The global ID of the tool.
///
/// \param completion A closure to be called when the content is loaded.
///
- (void)loadToolWithGlobalId:(NSString * _Nonnull)globalId completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Adds a notification observer for SDK state changes using selector-based API.
/// This method is provided for Objective-C compatibility.
/// For Swift code, use the block-based <code>addStateChangeObserver</code> method instead.
/// note:
/// In Objective-C, your selector should have the signature: <code>- (void)handleStateChange:(NSNotification *)notification</code>
/// \param observer The object that will receive the notification
///
/// \param selector The selector to call when the notification is received
///
///
/// returns:
/// A token that must be passed to removeStateChangeNotificationObserver
+ (id <NSObject> _Nonnull)addStateChangeNotificationObserver:(id _Nonnull)observer selector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
/// Adds a block-based notification observer for SDK state changes.
/// This is the recommended way to observe state changes in Swift code.
/// \param queue The operation queue to which block should be added (nil means current queue)
///
/// \param block The block to execute when the notification is received, which includes the state change
///
///
/// returns:
/// The token that can be used to remove the observer
+ (id <NSObject> _Nonnull)addStateChangeObserverWithQueue:(NSOperationQueue * _Nullable)queue using:(void (^ _Nonnull)(NSNotification * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Adds a block-based notification observer for SDK state changes, with state dictionary for Objective-C/React Native.
/// This method is specifically designed for Objective-C and React Native compatibility,
/// providing the state information as a dictionary rather than a Notification object.
/// \param queue The operation queue to which block should be added (nil means current queue)
///
/// \param block The block to execute when the notification is received, with state as dictionary
///
///
/// returns:
/// The token that can be used to remove the observer
+ (id <NSObject> _Nonnull)addStateChangeObserverWithDictionaryWithQueue:(NSOperationQueue * _Nullable)queue using:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))block SWIFT_WARN_UNUSED_RESULT;
/// Removes a notification observer for SDK state changes
/// note:
/// For block-based observers, use the token returned from addStateChangeObserver. For selector-based observers, pass the original observer object.
/// \param token The token returned from addStateChangeObserver, or the observer object itself if using addStateChangeNotificationObserver
///
+ (void)removeStateChangeNotificationObserver:(id <NSObject> _Nonnull)token;
/// Extracts the ProductFruitsState from a notification
/// \param notification The notification object
///
///
/// returns:
/// The ProductFruitsState or nil if not found
+ (ProductFruitsState * _Nullable)getStateFromNotification:(NSNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Get instance ID from notification
/// \param notification The notification object
///
///
/// returns:
/// The instance ID or nil if not found
+ (NSString * _Nullable)getInstanceIdFromNotification:(NSNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Get a snapshot of the current SDK state
///
/// returns:
/// The current SDK state
- (ProductFruitsState * _Nonnull)getCurrentState SWIFT_WARN_UNUSED_RESULT;
/// Gets the notification name for state changes, for use in Objective-C code
///
/// returns:
/// The notification name string
+ (NSString * _Nonnull)stateChangedNotificationName SWIFT_WARN_UNUSED_RESULT;
/// Extracts the state dictionary from a notification, useful for React Native bridges
/// \param notification The notification object
///
///
/// returns:
/// A dictionary representation of the state, or nil if not found
+ (NSDictionary<NSString *, id> * _Nullable)getStateDictionaryFromNotification:(NSNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Sends a preview notification for a specific experience.
/// \param experienceID The ID of the experience for which to send a preview notification.
///
/// \param completion Optional callback for when the notification is sent. Success is true if successful, false if failed.
///
- (void)sendPreviewNotificationWithExperienceID:(NSString * _Nonnull)experienceID completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ProductFruits (SWIFT_EXTENSION(ProductfruitsKit))
@end

@class NSURL;
@class NSURLSession;

SWIFT_CLASS("_TtCC16ProductfruitsKit13ProductFruits6Config") SWIFT_AVAILABILITY(ios,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface Config : NSObject
/// Creates a new configuration for the ProductFruits SDK.
/// \param projectCode The ProductFruits project code.
///
/// \param applicationID The application ID.
///
/// \param language The language code for the SDK (e.g., “en”, “fr”).
///
- (nonnull instancetype)initWithProjectCode:(NSString * _Nonnull)projectCode applicationID:(NSString * _Nonnull)applicationID language:(NSString * _Nonnull)language OBJC_DESIGNATED_INITIALIZER;
/// Set the logging status for the configuration.
/// \param enabled Whether logging is enabled.
///
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)logging:(BOOL)enabled;
/// Set the logging status for the configuration with a specific category.
/// \param enabled Whether logging is enabled.
///
/// \param category The category for the logger, allowing for more specific filtering.
///
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)logging:(BOOL)enabled category:(NSString * _Nonnull)category;
/// Set the API host for the configuration.
/// Any path values in the provided <code>URL</code> will be discarded.
/// \param apiHost Domain of the API host.
///
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)apiHost:(NSURL * _Nonnull)apiHost;
/// Set the <code>URLSession</code> instance used by the configuration.
/// Injecting a custom <code>URLSession</code> may be useful for testing in combination with <code>URLSessionConfiguration.protocolClasses</code>.
/// \param urlSession <code>URLSession</code> object.
///
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)urlSession:(NSURLSession * _Nonnull)urlSession;
/// Configures the SDK to trust self-signed certificates for localhost connections.
/// This should only be used during development and never in production.
///
/// returns:
/// The <code>Configuration</code> object.
- (nonnull instancetype)trustLocalhostCertificates;
- (nonnull instancetype)deviceProperties:(NSDictionary<NSString *, id> * _Nonnull)deviceProperties;
/// Set a custom environment URL for the configuration.
/// This method sets both the API host and settings host to the provided URL.
/// \param environmentUrl The base URL for the ProductFruits environment.
///
///
/// returns:
/// The <code>ProductFruits.Config</code> object.
- (nonnull instancetype)setEnvironmentUrl:(NSURL * _Nonnull)environmentUrl;
/// Set the maximum number of activity items to store for retry.
/// \param maxSize The maximum number of items to store.
///
///
/// returns:
/// The <code>ProductFruits.Config</code> object.
- (nonnull instancetype)activityStorageMaxSize:(NSUInteger)maxSize;
/// Set the maximum age in seconds for stored activity items.
/// \param maxAgeSeconds The maximum age in seconds.
///
///
/// returns:
/// The <code>ProductFruits.Config</code> object.
- (nonnull instancetype)activityStorageMaxAge:(NSUInteger)maxAgeSeconds;
- (nonnull instancetype)setUserLanguage:(NSString * _Nonnull)language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface ProductFruits (SWIFT_EXTENSION(ProductfruitsKit))
- (NSURL * _Nonnull)getBaseEnvUrl SWIFT_WARN_UNUSED_RESULT;
@end


/// Errors that can occur in the ProductFruits SDK.
typedef SWIFT_ENUM(NSInteger, ProductFruitsError, open) {
  ProductFruitsErrorUserNotIdentified = 0,
  ProductFruitsErrorInvalidToolId = 1,
  ProductFruitsErrorInvalidConfiguration = 2,
  ProductFruitsErrorInvalidResponse = 3,
  ProductFruitsErrorNetworkError = 4,
  ProductFruitsErrorInvalidUsername = 5,
  ProductFruitsErrorSdkNotAvailable = 6,
  ProductFruitsErrorActivityProcessingFailed = 7,
  ProductFruitsErrorUnsupportedOSVersion = 8,
  ProductFruitsErrorInternalError = 9,
};
static NSString * _Nonnull const ProductFruitsErrorDomain = @"ProductfruitsKit.ProductFruitsError";

enum IdentificationStatus : NSInteger;

SWIFT_CLASS("_TtC16ProductfruitsKit18ProductFruitsState")
@interface ProductFruitsState : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly) BOOL isAnonymous;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceID;
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
@property (nonatomic, readonly) BOOL isActive;
@property (nonatomic, readonly, copy) NSString * _Nonnull lastUpdated;
@property (nonatomic, readonly) enum IdentificationStatus status;
@property (nonatomic, readonly, copy) NSString * _Nonnull statusDescription;
- (nonnull instancetype)initWithVersion:(NSString * _Nonnull)version projectCode:(NSString * _Nonnull)projectCode userID:(NSString * _Nonnull)userID isAnonymous:(BOOL)isAnonymous deviceID:(NSString * _Nonnull)deviceID sessionID:(NSString * _Nullable)sessionID isActive:(BOOL)isActive OBJC_DESIGNATED_INITIALIZER;
/// Get a JSON representation of the state
/// @returns Dictionary containing the state properties
- (NSDictionary<NSString *, id> * _Nonnull)toDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IdentificationStatus, open) {
  IdentificationStatusNotIdentified = 0,
  IdentificationStatusAnonymous = 1,
  IdentificationStatusIdentified = 2,
};


SWIFT_CLASS("_TtC16ProductfruitsKit24StateNotificationManager") SWIFT_AVAILABILITY(ios,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface StateNotificationManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)postStateChangeFrom:(ProductFruits * _Nonnull)sdk;
@end








#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
